import sys, os                #sys:  명령행 매개변수 처리, 인터프리터 설정, 프로그램 종료와 관련된 작업 수행  os: 시스템 작업
from PyQt5.QtWidgets import * #PyQt5패키지에서 QtWidgerts 함수 변수 클래스 가져온다
from PyQt5 import uic #시각적으로 디자인된 UI를 파이썬코드로 변환
import googletrans               #pip install googletrans==4.0.0-rc1 
from gtts import gTTS            #pip install gtts gTTS의 텍스트를 음성으로 변환시켜준다(암기)
from playsound import playsound  #pip install playsound==1.2.2 변경된 데이터로 오디오 데이터를 생성해 재생시킨다(암기)

form_class = uic.loadUiType("c:/dev/ui/sample2.ui")[0] #UI를 로드하고 파이썬으로 전달(암기) 

class WindowClass(QMainWindow, form_class) : #window 클래스를 만들고 QMainWindow, form_class변수를 만든다. 
    def __init__(self) :                     #생성자
        super().__init__()                    #부모 클래스를 자식 클래스로 전승(암기)
        self.setupUi(self)                   #setupUI 변수 만든다.

        self.sayData = "None"               #변수 sayData를 만드고 글을 None으로 저장
        self.playlang=""                    #playlang을 만든다
        lang_dic = googletrans.LANGCODES    #lang_dic에 구글 언어 코드를 설정
        lc=list(lang_dic.values())          #위 딕셔너리에 값을 리스트로 싸서 lc 에 대입

        for x in lc:                        #딕셔너리를 돈다
            self.cmb_items.addItem(x)        #cmb_items에 x를 더한다

        self.btn_trans.clicked.connect(self.transClick) #UI버튼 클릭 되면 btn_trans를 변수 transClick와 연결 
        self.btn_play.setDisabled(True)                #bnt_play 연결 해제
        self.btn_play.clicked.connect(self.playClick) #bnt_play버든 클릭되면 playClick과 연결

    def playClick(self):   #playClick를 함수를 만들어서 sayData를 말한다
        print(self.sayData)

        if self.sayData != "None":                                #sayData가 None이 아닐때
            s = gTTS(text=self.sayData, lang = self.playlang)   #saydata와 playing을 음성파일로 변경
            s.save("sample.mp3")                                #s를 sample.mp3로 저장
            playsound("sample.mp3")                             #재생
            os.remove("sample.mp3")                             #시스템에서 파일을 제거한다

    def transClick(self):                                        #transClick을 만든다
        translator = googletrans.Translator()                       #translator에 번역한 것을 넣는다
        sentense = self.txt_src.toPlainText()                        #텍스트 반환
        detect = translator.detect(sentense)                      #문장 언어 감지
        src_lang = detect.lang                                #src_lang 문장 넣기
        dest_lang = self.cmb_items.currentText()               #cmb_items를 만들어서 현재 텍스트를 dest 에 넣는다
        translated = translator.translate(sentense, src=src_lang, dest=dest_lang)  #문장형으로, 감지 언어로, 현재 문장 번역 
        self.txt_trans.setText(translated.text)                       #txt_trans 변수를 만들어 번역된 문장을 가져온다

        #재생에 필요한 변수 정의 코드
        self.btn_play.setEnabled(True)  #btn_play를 연결가능하게 한다
        self.sayData = translated.text  #sayData에 번역된 문장을 넣는다
        self.playlang = dest_lang       #dest_lang을 playlang에 넣는다  

if __name__ == "__main__" :            #메인 함수:
    app = QApplication(sys.argv)       #sys.argv인수 넣는다 pyQt기반의 GUI어플리케이션을 만든다
    myWindow = WindowClass()          #클래스를 myWindow에 대입
    myWindow.show()                   #화면에 표시
    app.exec_()                       #실행한다
